function [fullCorrel, fullLasso, partialLasso]=covMatrixCreationMultipleSub(TR,session,subList)
% Output: this function output full correlation or regularized covariance
% and inversed covariance matrice with correlation and covariance matrix
% from all subjects concatenated
%Input:
%1.TRList: cell format, e.g. {'645','2500'};
%2.sessionlist: string, e.g. 'session1'
%3.SubList: in cell format, e.g. subList={'0021002', '0021006'} or in a
%text file.
%4.corType: numerical, 1=full correlation; 2=regularized covariance (This
%is removed from the original function)
% clear
% clc
% 
% session='session1';
% TR={'645'};
% subList={'8574662'};


winWidth=69;
step=3;
numVol=450;
numWin=floor((numVol-winWidth)/step)+1;
numSub=length(subList);
numWinAllSub=numWin*numSub;
lambdaList=(0.08:0.01:0.14);
numLambda=length(lambdaList);

analyDir=['/home/data/Projects/microstate/DPARSF_preprocessed/'];
resultDir=[analyDir,'results/',char(TR), '/',session,'/lambdaSensitivity/covMatrix/'];

% create the convolved window
[finalWin]=winCreation(winWidth,0);
finalWin=finalWin';

disp(['Create full and partial correlation matrix for ',TR,' ', session,'.'])

for k=1:numSub
    sub=subList{k};
    disp (['Working on sub ', char(sub),' ......'])
    subDir=[analyDir,'data/',char(TR),'/',session,'/',char(sub)];
    seedROISignals = load([subDir,'/ROISignals_seed_ROISignal.mat']);
    TC1=seedROISignals.ROISignals;
    numSeed=size(TC1,2);
    
    ROIROISignals=load([subDir,'/ROISignals_atlas_ROISignal.mat']);
    TC2=ROIROISignals.ROISignals;
    numROI=size(TC2,2);
    
    % concatenate the time series of seeds and ROIs
    TC=[TC1,TC2];
    
    % apply the sliding window to the time series
    asize = size(TC);
    
    % win(winWidth,asize(2),numWinAllSub);
    for q=1+numWin*(k-1):numWin*k;
        for n=((q-1)-(k-1)*numWin)*step+1:winWidth+((q-1)-(k-1)*numWin)*step
            for m=1:asize(2)
                win(n-((q-1)-(k-1)*numWin)*step,m,q)=TC(n,m)*finalWin((n-((q-1)-(k-1)*numWin)*step),1);
            end
        end
    end
end

disp (['Window applying done for all subjects. All windows of time series are saved in one matrix!'])
disp (['Compute the full and parital correlation for each window'])

% generate the full correlation for each window
for q=1:numWinAllSub
    corrWin(:,:,q)=corrcoef(win(:,:,q));
    for n=1:asize(2)
        for m=1:asize(2)
            fullCorrel(n,m,q)=0.5*log((1+corrWin(n,m,q))./(1-corrWin(n,m,q)));
        end
    end
end
disp('Fisher Z transformed full correlation matrix was generated for each window.')
save([resultDir,'fullCorrel_', num2str(numSub),'subject.mat'],'fullCorrel')


% generate partial correlation for each window
for p=1:numLambda
    lambda=lambdaList(p)
    for q=1:numWinAllSub
        clear tmp normWin
        tmp1=squeeze(win(:,:,q));
        normWin= (tmp1-repmat(mean(tmp1),size(tmp1,1),1))./repmat(std(tmp1),size(tmp1,1),1);
        normWin(isnan(normWin))=0;
        [W, theta, lambdaList, errors]=GraphicalLassoPath(normWin,lambda);
        WAllWin(:,:,q)=W;
        thetaAllWin(:,:,q)=theta;
        disp(['Graphical Lasso for window',num2str(q),' done!'])
        for n=1:asize(2)
            for m=1:asize(2)
                fullLasso(n,m,q)=0.5*log((1+WAllWin(n,m,q))./(1-WAllWin(n,m,q)));
                partialLasso(n,m,q)=0.5*log((1+thetaAllWin(n,m,q))./(1-thetaAllWin(n,m,q)));
            end
        end
    end
    disp('Full and Partial covariance matrice were generated by Graphic Lasso for each window.')
    save([resultDir,'fullCovLasso_', num2str(numSub),'subject_lambda', num2str(lambda),'.mat'],'fullLasso')
    save([resultDir,'inverseCovLasso_', num2str(numSub),'subject_lambda', num2str(lambda),'.mat'],'partialLasso')
end
end







